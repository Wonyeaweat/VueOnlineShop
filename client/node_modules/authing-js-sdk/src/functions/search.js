export default function search(query, options) {
  if (!query) {
    throw Error("query is not provided");
  }
  options = options || { type: "all", page: 0, count: 10 }
  return this.fetchToken.then(() => {
    return this.UserServiceGql.request(
      {
        operationName: "searchUser",
        query: `query searchUser(
          $type: String!
          $value: String!
          $registerInClient: String!
          $page: Int
          $count: Int
        ) {
          searchUser(
            type: $type
            value: $value
            registerInClient: $registerInClient
            page: $page
            count: $count
          ) {
            totalCount
            list {
              _id
              email
              username
              nickname
              phone
              photo
              loginsCount
              lastLogin
              lastIP
              signedUp
              blocked
              isDeleted
            }
          }
        }
        `,
        variables: {
          registerInClient: this.userPoolId,
          value: query,
          ...options
        },
      },
      "ownerToken"
    );
  });
}
